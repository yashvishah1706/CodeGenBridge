# -*- coding: utf-8 -*-
"""visualize.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yn3bq__jCYA428BaHdQ-KOBujoqDqPcr
"""

# evaluation/visualize.py
import os
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

class ResultsVisualizer:
    def __init__(self, results_dir="../results"):
        """Initialize the results visualizer"""
        self.results_dir = results_dir
        self.detailed_results_path = os.path.join(results_dir, 'detailed_results.csv')
        self.summary_results_path = os.path.join(results_dir, 'summary_results.csv')

        self.output_dir = os.path.join(results_dir, 'visualizations')
        os.makedirs(self.output_dir, exist_ok=True)

    def load_data(self):
        """Load results data"""
        if os.path.exists(self.detailed_results_path):
            self.detailed_df = pd.read_csv(self.detailed_results_path)
        else:
            raise FileNotFoundError(f"Detailed results file not found: {self.detailed_results_path}")

        if os.path.exists(self.summary_results_path):
            self.summary_df = pd.read_csv(self.summary_results_path)
        else:
            raise FileNotFoundError(f"Summary results file not found: {self.summary_results_path}")

    def plot_success_rates(self):
        """Plot success rates comparison"""
        labels = ['Custom Model', 'GitHub Copilot']
        success_rates = [
            self.summary_df['custom_success_rate'].iloc[0],
            self.summary_df['copilot_success_rate'].iloc[0]
        ]

        plt.figure(figsize=(10, 6))
        bars = plt.bar(labels, success_rates, color=['blue', 'orange'])

        # Add value labels on top of bars
        for bar in bars:
            height = bar.get_height()
            plt.text(bar.get_x() + bar.get_width()/2., height + 0.01,
                    f'{height:.2%}',
                    ha='center', va='bottom')

        plt.title('Functional Correctness Success Rate')
        plt.ylabel('Success Rate')
        plt.ylim(0, 1.1)
        plt.grid(axis='y', linestyle='--', alpha=0.7)

        plt.savefig(os.path.join(self.output_dir, 'success_rates.png'))

    def plot_generation_times(self):
        """Plot generation times comparison"""
        labels = ['Custom Model', 'GitHub Copilot']
        times = [
            self.summary_df['custom_avg_time'].iloc[0],
            self.summary_df['copilot_avg_time'].iloc[0]
        ]

        plt.figure(figsize=(10, 6))
        bars = plt.bar(labels, times, color=['blue', 'orange'])

        # Add value labels on top of bars
        for bar in bars:
            height = bar.get_height()
            plt.text(bar.get_x() + bar.get_width()/2., height + 0.01,
                    f'{height:.3f}s',
                    ha='center', va='bottom')

        plt.title('Average Code Generation Time')
        plt.ylabel('Time (seconds)')
        plt.grid(axis='y', linestyle='--', alpha=0.7)

        plt.savefig(os.path.join(self.output_dir, 'generation_times.png'))

    def plot_code_complexity(self):
        """Plot code complexity metrics"""
        models = ['Custom Model', 'GitHub Copilot']
        metrics = ['Lines of Code', 'Control Structures']

        values = [
            [self.summary_df['custom_avg_lines'].iloc[0],
             self.detailed_df['custom_control_count'].mean()],
            [self.summary_df['copilot_avg_lines'].iloc[0],
             self.detailed_df['copilot_control_count'].mean()]
        ]

        x = np.arange(len(metrics))
        width = 0.35

        fig, ax = plt.subplots(figsize=(10, 6))
        rects1 = ax.bar(x - width/2, values[0], width, label='Custom Model')
        rects2 = ax.bar(x + width/2, values[1], width, label='GitHub Copilot')

        # Add value labels
        def autolabel(rects):
            for rect in rects:
                height = rect.get_height()
                ax.annotate(f'{height:.1f}',
                           xy=(rect.get_x() + rect.get_width()/2, height),
                           xytext=(0, 3),
                           textcoords="offset points",
                           ha='center', va='bottom')

        autolabel(rects1)
        autolabel(rects2)

        ax.set_title('Code Complexity Metrics')
        ax.set_xticks(x)
        ax.set_xticklabels(metrics)
        ax.legend()
        ax.grid(axis='y', linestyle='--', alpha=0.7)

        plt.savefig(os.path.join(self.output_dir, 'code_complexity.png'))

    def plot_similarity_scores(self):
        """Plot similarity to reference solutions"""
        labels = ['ROUGE-1', 'ROUGE-L']
        custom_scores = [
            self.summary_df['custom_avg_rouge1'].iloc[0],
            self.summary_df['custom_avg_rougeL'].iloc[0]
        ]
        copilot_scores = [
            self.summary_df['copilot_avg_rouge1'].iloc[0],
            self.summary_df['copilot_avg_rougeL'].iloc[0]
        ]

        x = np.arange(len(labels))
        width = 0.35

        fig, ax = plt.subplots(figsize=(10, 6))
        rects1 = ax.bar(x - width/2, custom_scores, width, label='Custom Model')
        rects2 = ax.bar(x + width/2, copilot_scores, width, label='GitHub Copilot')

        # Add value labels
        def autolabel(rects):
            for rect in rects:
                height = rect.get_height()
                ax.annotate(f'{height:.3f}',
                           xy=(rect.get_x() + rect.get_width()/2, height),
                           xytext=(0, 3),
                           textcoords="offset points",
                           ha='center', va='bottom')

        autolabel(rects1)
        autolabel(rects2)

        ax.set_title('Similarity to Reference Solutions')
        ax.set_xticks(x)
        ax.set_xticklabels(labels)
        ax.set_ylim(0, 1)
        ax.legend()
        ax.grid(axis='y', linestyle='--', alpha=0.7)

        plt.savefig(os.path.join(self.output_dir, 'similarity_scores.png'))

    def generate_all_visualizations(self):
        """Generate all visualizations"""
        self.load_data()
        self.plot_success_rates()
        self.plot_generation_times()
        self.plot_code_complexity()
        self.plot_similarity_scores()

        print(f"All visualizations saved to {self.output_dir}")

